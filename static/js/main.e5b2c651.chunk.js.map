{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","value","ref","useEffect","current","usePrevious","focus","console","log","editingTemplate","Container","Form","className","onSubmit","e","preventDefault","editTask","id","Group","Label","htmlFor","name","Control","type","onChange","target","placeholder","Button","variant","size","onClick","viewTemplate","Row","Col","xs","md","ToggleButton","var","ls","localStorage","getItem","checked","completed","toggleTaskCompleted","class","deleteTask","MyForm","setName","addTask","lg","autoComplete","FilterButton","color","isPressed","setFilter","FILTER_MAP","AllTask","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","listHeadingRef","prevTaskLength","length","filterList","map","updatedTasks","setItem","JSON","stringify","parse","year","month","date","hour","minute","second","remainingTasks","removeItem","editedTaskList","alert","values","i","j","includes","push","allStorage","taskList","sort","a","b","setCount","tasksNoun","headingText","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","newTask","nanoid","getUTCMonth","prevCount","tabIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5b2c651.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Container, Row, Col, Form, Button, ToggleButton } from \"react-bootstrap\";\r\nimport { BsFillTrashFill,BsFillPencilFill,BsCheckLg,BsSave2Fill,BsFillSlashCircleFill, BsSlashCircleFill } from \"react-icons/bs\";\r\n\r\nfunction usePrevious(value) { \r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n  const wasEditing = usePrevious(isEditing);\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n  //const sortedvalues = values.sort(function(a,b){ return b.id-a.id});\r\n  console.log(\"main render\");\r\n  //const [checked, setChecked] = useState(false);\r\n  const editingTemplate = (\r\n    <Container>  \r\n      <Form className=\"stack-small\" onSubmit={handleSubmit}>\r\n        <Form.Group className=\"mb-3\">   \r\n          <Form.Label htmlFor={props.id}>\r\n            <h4>Edit name of \"<strong>{props.name}</strong>\"</h4>\r\n          </Form.Label>\r\n          <Form.Control\r\n            id={props.id}\r\n            className=\"todo-text\"\r\n            type=\"text\"\r\n            value={newName}\r\n            onChange={handleChange}\r\n            ref={editFieldRef}\r\n            placeholder=\"Enter new name of this task\"\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"btn btn-outline-info\" size=\"md\" type=\"submit\">\r\n          <BsSave2Fill></BsSave2Fill>\r\n          <span className=\"visually-hidden\"> new name for {props.name}</span>\r\n        </Button>{' '}\r\n        <Button variant=\"outline-danger\" size=\"md\" type=\"button\" onClick={() => setEditing(false)}>\r\n          <BsSlashCircleFill></BsSlashCircleFill>\r\n          <span className=\"visually-hidden\"> renaming {props.name}</span>\r\n        </Button>{' '}\r\n      </Form>\r\n    </Container>\r\n  );\r\n  \r\n  const viewTemplate = (\r\n    <Container>\r\n      <Row className=\"stack-small\">\r\n        <Col xs={2} md=\"auto\" >\r\n          <ToggleButton\r\n            className=\"mb-2\"\r\n            id={props.id}\r\n            var ls = {localStorage.getItem(props.id)}\r\n            type=\"checkbox\"\r\n            variant=\"outline-light\"\r\n            checked={props.completed}\r\n            size=\"md\"\r\n            value=\"1\"\r\n            onChange={() => {props.toggleTaskCompleted(props.id)}}\r\n          >\r\n            <BsCheckLg></BsCheckLg>\r\n          </ToggleButton>\r\n        </Col>\r\n        <Col xs={6} md={10} className=\"todo-label\" htmlFor={props.id}>\r\n          <h3><strong>{props.name}</strong></h3>\r\n        </Col>\r\n        <Col xs=\"auto\" md=\"auto\" class=\"d-flex flex-column-reverse\">\r\n          <Button variant=\"outline-info\" size=\"md\" type=\"button\" onClick={() => setEditing(true)} ref={editButtonRef}>\r\n            <BsFillPencilFill></BsFillPencilFill><span className=\"visually-hidden\">{props.name}</span>\r\n          </Button>{' '}\r\n\r\n          <Button variant=\"outline-danger\" size=\"md\" type=\"button\" onClick={() => props.deleteTask(props.id)}>\r\n             <BsFillTrashFill></BsFillTrashFill><span className=\"visually-hidden\">{props.name}</span>\r\n          </Button>{' '}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}","import React, { useState } from \"react\";\r\nimport { Container, Form, Button, Stack, Row, Col } from \"react-bootstrap\";\r\n\r\nimport { BsPlusLg } from \"react-icons/bs\";\r\n\r\nfunction MyForm(props) {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n  return (\r\n    <Container className=\"justify-content-md-center\">\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col>\r\n            <br>\r\n            </br>\r\n          </Col>\r\n          <Col xs={8} md={10} lg={10}>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id=\"new-todo-input\"\r\n              className=\"input input__lg\"\r\n              name=\"text\"\r\n              autoComplete=\"off\"\r\n              value={name}\r\n              placeholder=\" What needs to be done?\"\r\n              onChange={handleChange}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Button type=\"submit\" variant=\"success\" size=\"md\"> \r\n              <BsPlusLg></BsPlusLg>\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <br>\r\n            </br>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container >\r\n\r\n  );\r\n}\r\n\r\nexport default MyForm;\r\n","import React from \"react\";\r\nimport {Button} from 'react-bootstrap';\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <Button\r\n      variant={props.color}\r\n      size=\"md\"\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;","import './App.css';\r\nimport Todo from \"./components/Todo\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport MyForm from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nconst FILTER_MAP = {\r\n  AllTask: () => true,\r\n  Active: (task) => !task.completed,\r\n  Completed: (task) => task.completed,\r\n};\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nfunction App(props) {\r\n  const [tasks, setTasks] = useState(props.tasks);    // Add,Edit,Delete tasks\r\n  const [filter, setFilter] = useState(\"AllTask\");    // Filter button\r\n  const listHeadingRef = useRef(null);\r\n  const prevTaskLength = usePrevious(tasks.length);\r\n  const filterList = FILTER_NAMES.map((name) => (\r\n    <FilterButton\r\n      key={name}\r\n      name={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n      color={name === filter ? 'btn btn-primary btn-lg' : \"btn btn-secondary btn-lg\"}    //Change the color of filter button when choosed\r\n    />\r\n  ));\r\n\r\n  function toggleTaskCompleted(id) {\r\n    var ls = localStorage.getItem(id);\r\n\r\n    const updatedTasks = tasks.map((task) => {\r\n      if (id === task.id) {          // if this task has the same ID as the edited task\r\n        localStorage.setItem(id, JSON.stringify({\r\n          name: JSON.parse(ls).name, completed: !task.completed,\r\n          year: JSON.parse(ls).year, month: JSON.parse(ls).month, date: JSON.parse(ls).date,\r\n          hour: JSON.parse(ls).hour, minute: JSON.parse(ls).minute, second: JSON.parse(ls).second\r\n        }));        //Edit item in localstorage       \r\n        return { ...task, completed: !task.completed };         // use object spread to make a new object whose `completed` prop has been inverted\r\n      }\r\n      return task;\r\n    });\r\n\r\n    setTasks(updatedTasks);\r\n  }\r\n\r\n\r\n  function allStorage() {     //get previous item in localstorage\r\n    let values = [];\r\n    const keys = Object.keys(localStorage);\r\n    let i = keys.length;\r\n    var j = 0;\r\n\r\n\r\n    while (j < i) {\r\n      var ls = localStorage.getItem(keys[j]);\r\n      if (!keys[j].includes(\"todo\")) return;\r\n\r\n      values.push({\r\n        id: keys[j], name: JSON.parse(ls).name, completed: JSON.parse(ls).completed,\r\n        year: JSON.parse(ls).year, month: JSON.parse(ls).month, date: JSON.parse(ls).date,\r\n        hour: JSON.parse(ls).hour, minute: JSON.parse(ls).minute, second: JSON.parse(ls).second\r\n      });\r\n      j++;\r\n    }\r\n\r\n\r\n    return (values);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTasks(allStorage())\r\n  }, []);\r\n\r\n  function deleteTask(id) {\r\n    const remainingTasks = tasks.filter((task) => id !== task.id);\r\n    localStorage.removeItem(id);\r\n    setTasks(remainingTasks);\r\n  }\r\n\r\n  function editTask(id, newName) {\r\n    if (newName) {\r\n\r\n      const editedTaskList = tasks.map((task) => {\r\n        if (id === task.id) {         // if this task has the same ID as the edited task\r\n          return { ...task, name: newName };\r\n        }\r\n        return task;\r\n      });\r\n      var ls = localStorage.getItem(id);\r\n      localStorage.setItem(id, JSON.stringify({\r\n        name: newName, completed: JSON.parse(ls).completed,\r\n        year: JSON.parse(ls).year, month: JSON.parse(ls).month, date: JSON.parse(ls).date,\r\n        hour: JSON.parse(ls).hour, minute: JSON.parse(ls).minute, second: JSON.parse(ls).second\r\n      }));\r\n      setTasks(editedTaskList);\r\n    }\r\n    else {\r\n      alert(\"Please input something\");                    // Alert when no data has been entered\r\n    }\r\n  }\r\n\r\n  const taskList = tasks\r\n    .filter(FILTER_MAP[filter])\r\n    .sort((a, b) => { return a.year < b.year ? 1 : -1 })\r\n    .sort((a, b) => { return a.month < b.month ? 1 : -1 })\r\n    .sort((a, b) => { return a.date < b.date ? 1 : -1 })\r\n    .sort((a, b) => { return a.hour < b.hour ? 1 : -1 })\r\n    .sort((a, b) => { return a.minute < b.minute ? 1 : -1 })\r\n    .sort((a, b) => { return a.second < b.second ? 1 : -1 })\r\n    .sort((a, b) => { return a.completed > b.completed ? 1 : -1 })\r\n    .map((task) => (\r\n      <Todo\r\n        id={task.id}\r\n        name={task.name}\r\n        completed={task.completed}\r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        deleteTask={deleteTask}\r\n        editTask={editTask}\r\n      />\r\n    ));\r\n\r\n\r\n  const [count, setCount] = useState(0);\r\n  const handleIncrement = () => {\r\n    setCount(prevCount => prevCount + 1);\r\n  };\r\n\r\n  function addTask(name) {\r\n    var today = new Date(),\r\n      time = today.getFullYear() + ':' + today.getMonth() + ':' + today.getDate() + ':' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\r\n    if (name) {\r\n      const newTask = {\r\n        id: \"todo-\" + nanoid(), name: name, completed: false,\r\n        year: today.getFullYear(), month: today.getUTCMonth(), date: today.getDate(),\r\n        hour: today.getHours(), minute: today.getMinutes(), second: today.getSeconds()\r\n      };\r\n      localStorage.setItem(newTask.id, JSON.stringify({\r\n        name: name, completed: false,\r\n        year: today.getFullYear(), month: today.getUTCMonth(), date: today.getDate(),\r\n        hour: today.getHours(), minute: today.getMinutes(), second: today.getSeconds()\r\n      }))\r\n      setTasks([...tasks, newTask]);\r\n      handleIncrement();\r\n    }\r\n    else {\r\n      alert(\"Please input something\");              // Alert when no data has been entered\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const tasksNoun = taskList.length !== 1 ? \"tasks\" : \"task\";\r\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\r\n\r\n  useEffect(() => {\r\n    if (tasks.length - prevTaskLength === -1) {\r\n      listHeadingRef.current.focus();\r\n    }\r\n  }, [tasks.length, prevTaskLength]);\r\n\r\n  return (\r\n    <div class=\"p-3 mb-2 bg-dark text-white\">\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <blockquote class=\"blockquote text-center\">\r\n              <h1>\r\n                Cool To-Do List\r\n              </h1>\r\n              <h3><strong><small class=\"text-muted\">Help you to record the future events</small></strong></h3>\r\n            </blockquote>\r\n          </Col>\r\n          <br>\r\n          </br>\r\n        </Row>\r\n\r\n        <Row>\r\n          <MyForm addTask={addTask} />\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col className=\"filters btn-group stack-exception\">{filterList}</Col>\r\n        </Row>\r\n        <br>\r\n        </br>\r\n        <Row id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\r\n          {headingText}\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            {taskList}\r\n          </Col>\r\n        </Row>\r\n      </Container >\r\n    </div>\r\n  );\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\nconst DATA = [\r\n    //{ id: localStorage.key(0), name: localStorage.getItem(localStorage.key(0)), completed: false }\r\n];\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App tasks={DATA}/>    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}